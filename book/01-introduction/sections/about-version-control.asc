=== دربارهٔ کنترل نسخه

(((version control)))
«کنترل نسخه» چیست و چرا باید بدان پرداخت؟ کنترل نسخه سیستمی است که تغییرات را در فایل یا دسته‌ای از
فایل‌ها ذخیره می‌کند و به شما این امکان را می‌دهد که در آینده به نسخه و نگارش خاصی برگردید.
برای مثال‌های این کتاب شما از سورس کد نرم‌افزار به عنوان فایل‌هایی که نسخه آنها کنترل می‌شود استفاده می‌کنید.
اگرچه در واقع می‌توانید تقریباً از هر فایلی استفاده کنید.

<<<<<<< HEAD
اگر شما یک گرافیست یا طراح وب هستید و می‌خواهید نسخه‌های متفاوت از عکس‌ها و قالب‌های خود داشته باشید (که احتمالاً می‌خواهید)، یک سیستم کنترل نسخه (Version Control System (VCS)) انتخاب خردمندانه‌ای است.
یک VCS به شما این امکان را می‌دهد که فایل‌های انتخابی یا کل پروژه را به یک حالت قبلی خاص برگردانید، روند تغییرات را بررسی کنید، ببینید چه کسی آخرین‌بار تغییری ایجاد کرده که احتمالاً مشکل آفرین شده،
چه کسی، چه وقت مشکلی را اعلام کرده و...
استفاده از یک VCS همچنین به این معناست که اگر شما در حین کار چیزی را خراب کردید و یا فایل‌هایی از دست رفت، به سادگی می توانید کارهای انجام شده را بازیابی نمایید.
همچنین مقداری سربار به فایل‌های پروژه‌تان افزوده می‌شود.
||||||| constructed merge base
اگر شما یک گرافیست یا طراح وب هستنید و می خواهید نسخه های متفاوت از عکس ها و کارهای خود را ( ) نگهداری کنید، سامانه ی کنترل نسخه (VCS) یک گزینه خردمندانه است. VCS به شما امکان برگشت دادن فایل ها یا حتی کل پروژه به وضعیت قبل را میدهد.
 همچنین می توانید تغییرات را با مقایسه کردن نسخه ها به سادگی ببینید. آخرین تغییرات (که منجر به خطا شده است) را چه کسی انجام داده است. چه کسی و کی مسئله و مشکلی را مطرح کرده است و از این دست امکانانت.
بکار گیری یک VCS همچنین به این معناست که اگر شما در حین کار پروژه را خراب کردید و فایلهایی به اشتباه از دست رفت، شما به سادگی می توانید پروژه و کارهای انجام شده را بازیابی نمایید. تمام این امکانات با ازاء مقدار بسیار کمی سربار پروژه است.
=======
اگر شما یک گرافیست یا طراح وب هستید و می‌خواهید نسخه‌های متفاوت از عکس ها و قالب‌های خود داشته باشید (که احتمالاً می‌خواهید)، یک سیستم کنترل نسخه (Version Control System (VCS)) انتخاب خردمندانه‌ای است.
یک VCS به شما این امکان را می‌دهد که فایل‌های انتخابی یا کل پروژه را به یک حالت قبلی خاص برگردانید، روند تغییرات را بررسی کنید، ببینید چه کسی آخرین‌بار تغییری ایجاد کرده که احتمالاً مشکل آفرین شده،
چه کسی، چه وقت مشکلی را اعلام کرده و...
استفاده از یک VCS همچنین به این معناست که اگر شما در حین کار چیزی را خراب کردید و یا فایل‌هایی از دست رفت، به سادگی می توانید کارهای انجام شده را بازیابی نمایید.
همچنین مقداری سربار به فایل‌های پروژه‌تان افزوده می‌شود.
>>>>>>> Rewriting of the first 4 chapters have been done.

==== سیستم‌های کنترل نسخهٔ محلی

(((version control,local)))
<<<<<<< HEAD
روش اصلی کنترل نسخهٔ کثیری از افراد کپی کردن فایل‌ها به پوشه‌ای دیگر است (احتمالاً با تاریخ‌گذاری، اگر خیلی باهوش باشند).
این رویکرد به علت سادگی بسیار رایج است هرچند خطا آفرینی بالایی دارد.
فراموش کردن اینکه در کدام پوشه بوده‌اید و نوشتن اشتباهی روی فایل یا فایل‌هایی که نمی‌خواستید روی آن بنویسید بسیار ساده است.
||||||| constructed merge base
بیاری از کنترل نسخه کردن ها توسط مردم به سادگی با رونوشت گیری از کل فایلها در پوشه ای دیگرا نجام می گیرد. (که اگر خیلی هنر کده باشند نام پوشه ها متناظر با زمان خواهد بود)
این رویکرد بسیار کاربرد دارد چون ساده است. اما بسیار بسیار امکان خطار در این روش وجود دارد. به راختی فراموش می کنیم که روی کدام پوشه کار می کردیم و پوشه را اشتباهی تغییر می دهیم یا رونوشتی اشتباه گرفته می شود.
=======
روش اصلی کنترل نسخه توسط کثیری از افراد کپی کردن فایل‌ها به پوشه‌ای دیگر است (احتمالاً با تاریخ‌گذاری، اگر خیلی باهوش باشند).
این رویکرد به علت سادگی بسیار رایج است هرچند خطا آفرینی بالایی دارد.
فراموش کردن اینکه در کدام پوشه بوده‌اید و نوشتن اشتباهی روی فایل یا فایل‌هایی که نمی‌خواستید روی آن بنویسید بسیار ساده است.
>>>>>>> Rewriting of the first 4 chapters have been done.

<<<<<<< HEAD
برای حل این مشکل، سال‌ها قبل VCSهای محلی را توسعه دادند که پایگاه داده‌ای ساده داشت که تمام تغییرات فایل‌های تحت مراقبتش را نگهداری می‌کرد.
||||||| constructed merge base
در چالش با این مباحث و مسائل، برنامه نویسان پیشتر از این VCS های محلی و فردی را ساختند که یک پایگاه داده ی ساده داشته که تمام تغییرات را نگهداری می کرده است.
=======
برای حل این مشکل، سال‌ها قبل VCSهای محلی و را توسعه دادند که پایگاه داده‌ای ساده داشت که تمام تغییرات فایل‌های تحت مراقبتش را نگهداری می‌کرد.
>>>>>>> Rewriting of the first 4 chapters have been done.

.کنترل نسخه محلی.
image::images/local.png[Local version control diagram]

<<<<<<< HEAD
یکی از شناخته‌شده‌ترین ابزاری‌های کنترل نسخه، سیستمی به نام RCS بود که حتی امروز، با بسیاری از کامپیوترها توزیع می‌شود.
https://www.gnu.org/software/rcs/[RCS] با نگه داشتن مجموعه‌هایی از پچ‌ها (Patch/وصله) -- همان تفاوت‌های بین نگارش‌های گوناگون فایل‌ها -- در قالبی ویژه کار می‌کند؛
پس از این، با اعمال پچ‌ها می‌تواند هر نسخه‌ای از فایل که مربوط به هر زمان دلخواه است را بازسازی کند.
||||||| constructed merge base
یکی از شناخته شده ترین ابزاری های کنترل نسخه، سامانه ای است به نام RCS که امروزه در بسیار از کامپیوترها توزیع شده است. مثلا در سیستم عامل معروف Mac OS X اگر ابزارهای توسعه دهنده (Developer Tools)  را نصب کنیم. خط فرمان rcs نیز نصب خواهد شد.
روش کار RCS، نگه داشتن مجموعه ای از وصله ها ( وصله ها همان تفاوت های بین نگارشهای گوناگون فایلها هستند) در ساختاری ویژه است.
 در این روش با چسباندن مجموعه ی مشخصی از این وصله ها به هم می توان نسخه ای از فایل را که مربوط به هر زمان دلخواه است دوباره ایجاد کرد.
=======
یکی از شناخته‌شده‌ترین ابزاری‌های کنترل نسخه، سیستمی به نام RCS بود که حتی امروز، با بسیاری از کامپیوترها توزیع می‌شود.
RCS با نگه داشتن مجموعه‌هایی از پچ‌ها (Patch/وصله) -- همان تفاوت‌های بین نگارش‌های گوناگون فایل‌ها هستند -- در قالبی ویژه کار می‌کند؛
پس از این، با اعمال پچ‌ها می‌تواند هر نسخه‌ای از فایل که مربوط به هر زمان دلخواه است را بازسازی کند.
>>>>>>> Rewriting of the first 4 chapters have been done.

==== سیستم‌های کنترل نسخه ی متمرکز

(((version control,centralized)))
<<<<<<< HEAD
چالش بزرگ دیگری که مردم با آن روبرو می شوند نیاز به همکاری با توسعه‌دهندگانی است که با سیستم‌های دیگر کار می‌کنند.
دربرخورد با این چالش سیستم‌های کنترل نسخه متمرکز (Centralized Version Control System (CVCS)) ایجاد شدند.
این قبیل سیستم‌ها (چون CVS، ساب‌ورژن و Preforce) یک سرور دارند که تمام فایل‌های نسخه‌بندی شده را در بر دارد و تعدادی کلاینت (Client/خدمت‌گیرنده)
که فایل‌هایی را از آن سرور چک‌اوت (Checkout/وارسی) می‌کنند. (((CVS)))(((Subversion)))(((Perforce))) سال‌های سال این روش استاندارد کنترل نسخه بوده است.
||||||| constructed merge base
چالش بزرگ دیگری که مردم با آن روبرو می شوند نیاز به همکاری با توسعه دهندگانی است که با سیستمهای دیگر کار می کنند. در برخود با این چالش سامانه های کنترل نسخه ی متمرکز (CVCSs) ایجاد شده اند.
 این سامانه ها چون CVS، Subversion و Preforce یک سرور دارند که تمام نگارشهای فایلها را در بر دارد و تعدادی مشتری یا خدمت گیرنده دارند که فایل ها را از سرور جهت انجام تغییرات به امانت می گیرند. سالهای سال این روش استاندارد کنترل نسخه بوده است.
=======
چالش بزرگ دیگری که مردم با آن روبرو می شوند نیاز به همکاری با توسعه‌دهندگانی است که با سیستم‌های دیگر کار می‌کنند.
دربرخورد با این چالش سیستم‌های کنترل نسخه متمرکز (Centralized Version Control System (CVCS)) ایجاد شدند.
این قبیل سیستم‌ها چون CVS، Subversion و Preforce یک سرور دارند که تمام فایل‌های نسخه‌بندی شده را در بر دارد و تعدادی کلاینت (Client/خدمت‌گیرنده)
که فایل‌هایی را از آن سرور چک‌اوت (Checkout/وارسی) می‌کنند. (((CVS)))(((Subversion)))(((Perforce))) سال‌های سال این روش استاندارد کنترل نسخه بوده است.
>>>>>>> Rewriting of the first 4 chapters have been done.

.کنترل نسخه متمرکز.
image::images/centralized.png[Centralized version control diagram]


<<<<<<< HEAD
این ساماندهی به ویژه برای VCSهای محلی منافع و مزایای بسیاری دارد. به طور مثال هر کسی به میزان مشخصی از فعالیت‌های دیگران روی پروژه آگاهی دارد.
مدیریان دسترسی و کنترل مناسبی بر این دارند که چه کسی چه کاری می تواند انجام دهد؛
همچنین مدیریت یک CVCS خیلی آسان‌تر از درگیری با پایگاه‌داده‌های محلی روی تک تک کلاینت‌هاست.
||||||| constructed merge base
به هر روی ، این گونه ساماندهی برخی پالشهای بنیادینی نیز دارد. آشکارترین آن رخدادن خطا در سروری که نسخه ها در آن متمرکز شده است.
 اگر سرور برای یک ساعت دجار اختلال شود، در طول این یک ساعت هیچ کس نمی تواند تغییراتی که انجام داده و کارهایی که کرده است را ذخیره نماید.
اگر فضای ذخیره سازی سرور دچار مشکل شود و پشتیبان مناسبی هم تهیه نشده باشد همه چیز (تاریخچه کامل پروژه بجز آنچه یک خدمت گیرنده روی کامپیوتر محلی خود ذخیره کرده است) از دست خواهد رفت.
 VCS های محلی نیز همگی از این مشکل را دارند. هرگاه شما کل تاریخچه ی پروژه را یک جا نگه داری کنید، خطر از دست دادن کل پروژه وجود دارد.
=======
این ساماندهی به ویژه برای VCSهای محلی منافع و مزایای بسیاری دارد. به طور مثال هرکسی به میزان مشخصی از فعالیت های دیگران روی پروژه آگاهی دارد.
مدیریان دسترسی و کنترل مناسبی بر این دارند که چه کسی چه کاری می تواند انجام دهد؛
همچنین مدیریت یک CVCS خیلی آسان‌تر از درگیری با پایگاه‌داده‌های محلی روی تک تک کلاینت‌هاست.
>>>>>>> Rewriting of the first 4 chapters have been done.

هرچند که این گونه ساماندهی معایب جدی نیز دارد. واضح‌ترین آن رخدادن خطا در سروری که نسخه‌ها در آن متمرکز شده است.
اگر که سرور برای یک ساعت غیرفعال باشد، در طول این یک ساعت هیچ‌کس نمی تواند همکاری یا تغییراتی که انجام داده است را ذخیره نماید.
اگر هارددیسک سرور مرکزی دچار مشکلی شود و پشتیبان مناسبی هم تهیه نشده باشد
همه چیز (تاریخچه کامل پروژه بجز اسنپ‌شات‌هایی که یک کلاینت ممکن است روی کامپیوتر خود ذخیره کرده باشد) از دست خواهد رفت.
VCSهای محلی نیز همگی این مشکل را دارند -- هرگاه کل تاریخچه پروژه را در یک مکان واحد ذخیره کنید، خطر از دست‌دادن همه چیز را به جان می‌خرید.

==== سیستم‌های کنترل نسخه توزیع‌شده

(((version control,distributed)))

<<<<<<< HEAD
اینجا است که سیستم‌های کنترل نسخه توزیع‌شده (Distributed Version Control System (DVCS)) نمود پیدا می‌کنند.
در یک DVCS (مانند گیت، Mercurial، Bazaar یا Darcs) کلاینت‌ها صرفاً به چک‌اوت کردن آخرین اسنپ‌شات فایل‌ها اکتفا نمی‌کنند؛
بلکه آن‌ها کل مخزن (Repository) را کپی عینی یا آینه (Mirror) می‌کنند که شامل تاریخچه کاملش هم می‌شود.
بنابراین اگر هر سروری که سیستم‌ها به واسطه آن در حال تعامل با یکدیگر هستند متوقف و از کار بیافتد، با کپی مخرن هر کدام از کاربران بر روی سرور، می‌توان آن را بازیابی کرد.
در واقع هر کلون، پشتیبان کاملی از تمامی داده‌ها است.
||||||| constructed merge base
=======
اینجا است که سیستم‌های کنترل نسخه توزیع‌شده (Distributed Version Control System (DVCS)) نمود پیدا می‌کنند.
در یک DVCS (مانند Git، Mercurial، Bazaar یا Darcs) کلاینت‌ها صرفاً به checkout کردن آخرین اسنپ‌شات فایل‌ها اکتفا نمی‌کنند؛
بلکه آن‌ها کل مخزن (Repository) را کپی عینی یا آینه (Mirror) می‌کنند که شامل تاریخچه کاملش هم می‌شود.
بنابراین اگر هر سروری که سیستم‌ها به واسطه آن در حال تعامل با یکدیگر هستند متوقف و از کار بیافتد، با کپی مخرن هر کدام از کاربران بر روی سرور، می‌توان آن را بازیابی کرد.
در واقع هر کلون، پشتیبان کاملی از تمامی داده‌ها است.
>>>>>>> Rewriting of the first 4 chapters have been done.


.کنترل نسخه توزیع‌شده.
image::images/distributed.png[Distributed version control diagram]

علاوه بر آن اکثر این سیستم‌ها تعامل کاری خوبی با مخازن متعدد خارجی دارند و از آن استقبال می‌کنند،
در نتیجه شما می‌توانید با گروه‌های مختلفی به روش‌های مختلفی در قالب پروژه‌ای یکسان به‌صورت همزمان همکاری کنید.
این قابلیت این امکان را به کاربر می‌دهد که چندین جریان کاری متنوع، مانند مدل‌های سلسه مراتبی، را پیاده‌سازی کند که انجام آن در سیستم‌های متمرکز امکان‌پذیر نیست.
